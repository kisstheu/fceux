name: Build and Deploy

on:
  push:
    branches:
      - master  # 在 master 分支有更新时触发构建
  pull_request:
    branches:
      - master  # 在 PR 合并到 master 分支时触发构建

jobs:
  build:
    runs-on: ubuntu-latest  # 使用 GitHub 提供的最新 Ubuntu 环境

    steps:
    # 步骤 1: 检出代码
    - name: Checkout repository
      uses: actions/checkout@v2

    # 步骤 2: 缓存 apt 包依赖
    - name: Cache apt dependencies
      uses: actions/cache@v3
      with:
        path: /tmp/apt-cache
        key: ${{ runner.os }}-apt-${{ hashFiles('**/apt/apt.conf.d/*', '**/apt/sources.list.d/*', '**/apt/apt.conf') }}
        restore-keys: |
          ${{ runner.os }}-apt-

    # 步骤 3: 安装依赖
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential perl git
        sudo apt-get install -y lua5.1-dev
        sudo apt-get install -y libsdl2-dev
        sudo apt-get install -y libminizip-dev  # 安装 minizip 库
        sudo apt-get install -y libarchive-dev
        sudo apt-get install -y qtbase5-dev qtchooser qtbase5-dev-tools qt5-qmake  # 安装 Qt 5 基础包
        sudo apt-get install -y qtdeclarative5-dev  # 安装 Qt5 QML 模块
        sudo apt-get install -y libx264-dev libx265-dev
        sudo apt-get install -y libavcodec-dev libavformat-dev libavutil-dev libswscale-dev libswresample-dev
        sudo apt-get install -y cppcheck


    # 步骤 4: 缓存 CMake 构建目录
    - name: Cache CMake build directory
      uses: actions/cache@v3
      with:
        path: |
          $HOME/fceux-build
          $HOME/fceux-build/buildQT
        key: ${{ runner.os }}-build-${{ hashFiles('**/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-build-

    # 步骤 5: 创建构建目录并运行 CMake
    - name: Build project
      run: |
        mkdir -p $HOME/fceux-build
        cd $HOME/fceux-build
        mkdir buildQT
        cd buildQT
        cmake $GITHUB_WORKSPACE  # 指向源代码目录
        make -j$(nproc)
        make install DESTDIR=$HOME/fceux-build/install

    - name: Collect and upload all shared libraries
      run: |
        # 创建一个临时目录用于存放所有依赖库
        mkdir -p /home/runner/fceux-libs

        # 使用 ldd 获取 fceux 所有的动态库依赖
        dependencies=$(ldd /home/runner/fceux-build/install/usr/local/bin/fceux | grep "=> /" | awk '{print $3}')
        
        # 将所有依赖库复制到临时目录
        for lib in $dependencies; do
          cp --parents $lib /home/runner/fceux-libs/
        done

        # 上传 fceux 可执行文件和依赖库
        echo "Uploading fceux and its libraries..."
        tar -czf fceux_and_libraries.tar.gz -C /home/runner fceux-libs usr/local/bin/fceux
        
        # 上传 tar 包作为 artifact
        mv fceux_and_libraries.tar.gz /home/runner/fceux-build/
      continue-on-error: true  # 确保不会因为上传错误导致任务失败

    # 步骤 6: 上传构建产物
    - name: Upload fceux executable
      uses: actions/upload-artifact@v4
      with:
        name: fceux-executable
        path: /home/runner/fceux-build/fceux_and_libraries.tar.gz  # 绝对路径

